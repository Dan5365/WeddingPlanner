-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.couple_users
(
    couple_id integer NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT couple_users_pkey PRIMARY KEY (couple_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.couples
(
    id serial NOT NULL,
    CONSTRAINT couples_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.guests
(
    id serial NOT NULL,
    wedding_id integer NOT NULL,
    user_id integer,
    name character varying(100) COLLATE pg_catalog."default",
    rsvp_status integer NOT NULL,
    seating_number integer,
    CONSTRAINT guests_pkey PRIMARY KEY (id),
    CONSTRAINT unique_guest_per_wedding UNIQUE (wedding_id, name)
);

COMMENT ON COLUMN public.guests.name
    IS 'Name of the guest; may be NULL if user_id references a user with a name';

CREATE TABLE IF NOT EXISTS public.roles
(
    id integer NOT NULL,
    role_name character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS public.rsvp_statuses
(
    id integer NOT NULL,
    status_name character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT rsvp_statuses_pkey PRIMARY KEY (id),
    CONSTRAINT rsvp_statuses_status_name_key UNIQUE (status_name)
);

CREATE TABLE IF NOT EXISTS public.servicetypes
(
    id serial NOT NULL,
    type_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT servicetypes_pkey PRIMARY KEY (id),
    CONSTRAINT servicetypes_type_name_key UNIQUE (type_name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    role integer NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.vendors
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    service_type_id integer NOT NULL,
    payment numeric(10, 2) NOT NULL,
    availability boolean NOT NULL DEFAULT true,
    CONSTRAINT vendors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.weddings
(
    id serial NOT NULL,
    couple_id integer NOT NULL,
    date date NOT NULL,
    location character varying(255) COLLATE pg_catalog."default" NOT NULL,
    budget numeric(10, 2) NOT NULL,
    CONSTRAINT weddings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.weddingvendors
(
    wedding_id integer NOT NULL,
    vendor_id integer NOT NULL,
    CONSTRAINT weddingvendors_pkey PRIMARY KEY (wedding_id, vendor_id)
);

ALTER TABLE IF EXISTS public.couple_users
    ADD CONSTRAINT couple_users_couple_id_fkey FOREIGN KEY (couple_id)
    REFERENCES public.couples (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.couple_users
    ADD CONSTRAINT couple_users_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.guests
    ADD CONSTRAINT guests_rsvp_status_fkey FOREIGN KEY (rsvp_status)
    REFERENCES public.rsvp_statuses (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.guests
    ADD CONSTRAINT guests_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.guests
    ADD CONSTRAINT guests_wedding_id_fkey FOREIGN KEY (wedding_id)
    REFERENCES public.weddings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_role_fkey FOREIGN KEY (role)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.vendors
    ADD CONSTRAINT vendors_service_type_id_fkey FOREIGN KEY (service_type_id)
    REFERENCES public.servicetypes (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.vendors
    ADD CONSTRAINT vendors_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.weddings
    ADD CONSTRAINT weddings_couple_id_fkey FOREIGN KEY (couple_id)
    REFERENCES public.couples (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.weddingvendors
    ADD CONSTRAINT weddingvendors_vendor_id_fkey FOREIGN KEY (vendor_id)
    REFERENCES public.vendors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.weddingvendors
    ADD CONSTRAINT weddingvendors_wedding_id_fkey FOREIGN KEY (wedding_id)
    REFERENCES public.weddings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;